{"version":3,"sources":["./src/app/auth/auth-home/auth-home.component.css","./src/app/auth/auth-home/auth-home.component.html","./src/app/auth/auth-home/auth-home.component.ts","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/email-confirmation/email-confirmation.component.css","./src/app/auth/email-confirmation/email-confirmation.component.html","./src/app/auth/email-confirmation/email-confirmation.component.ts","./src/app/auth/guards/auth-home.guard.ts","./src/app/auth/guards/email-confirmation.guard.ts","./src/app/auth/guards/login.guard.ts","./src/app/auth/guards/password-reset.guard.ts","./src/app/auth/login/login.component.css","./src/app/auth/login/login.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/password-change/password-change.component.css","./src/app/auth/password-change/password-change.component.html","./src/app/auth/password-change/password-change.component.ts","./src/app/auth/password-forgotten/password-forgotten.component.css","./src/app/auth/password-forgotten/password-forgotten.component.html","./src/app/auth/password-forgotten/password-forgotten.component.ts","./src/app/auth/password-reset/password-reset.component.css","./src/app/auth/password-reset/password-reset.component.html","./src/app/auth/password-reset/password-reset.component.ts","./src/app/auth/password.service.ts","./src/app/auth/password/password.component.css","./src/app/auth/password/password.component.html","./src/app/auth/password/password.component.ts","./src/app/shared/constants/password-component-types.ts"],"names":[],"mappings":"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","file":"auth.module.chunk.js","sourcesContent":["module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/auth-home/auth-home.component.css\n// module id = ./src/app/auth/auth-home/auth-home.component.css\n// module chunks = auth.module","module.exports = \"<!-- <nav>\\r\\n  <a class=\\\"btn btn-ssn\\\" routerLink=\\\"./\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\">Home</a>\\r\\n  <a class=\\\"btn btn-ssn\\\" routerLink=\\\"./ResetPassword\\\" routerLinkActive=\\\"active\\\" (click)=\\\"setResetRequested()\\\">Reset password</a>\\r\\n</nav> -->\\r\\n\\r\\n<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/auth-home/auth-home.component.html\n// module id = ./src/app/auth/auth-home/auth-home.component.html\n// module chunks = auth.module","import { Component, OnInit } from '@angular/core';\r\nimport { PasswordService } from '../password.service';\r\n@Component({\r\n  selector: 'app-auth-home',\r\n  templateUrl: './auth-home.component.html',\r\n  styleUrls: ['./auth-home.component.css']\r\n})\r\nexport class AuthHomeComponent implements OnInit {\r\n\r\n  constructor(\r\n    private passwordService: PasswordService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  setResetRequested() {\r\n    this.passwordService.setResetRequested(true);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth-home/auth-home.component.ts","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthHomeComponent } from './auth-home/auth-home.component';\r\nimport { EmailConfirmationComponent } from './email-confirmation/email-confirmation.component';\r\nimport { AuthHomeGuard } from './guards/auth-home.guard';\r\nimport { EmailConfirmationGuard } from './guards/email-confirmation.guard';\r\nimport { LoginGuard } from './guards/login.guard';\r\nimport { PasswordResetGuard } from './guards/password-reset.guard';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { PasswordChangeComponent } from './password-change/password-change.component';\r\nimport { PasswordForgottenComponent } from './password-forgotten/password-forgotten.component';\r\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\r\n\r\nconst authRoutes: Routes = [\r\n  {\r\n    path: '',   /*  /auth   */\r\n    // redirectTo: 'auth/login',\r\n    // pathMatch: 'full',\r\n    // component: LoginComponent,\r\n    // canActivate: [LoginGuard],\r\n    component: AuthHomeComponent,\r\n    children: [\r\n        {\r\n          path: '',\r\n          pathMatch: 'full',\r\n          redirectTo: 'login'\r\n        },\r\n        {\r\n            path: 'ResetPassword',\r\n            component: PasswordResetComponent,\r\n            // canActivate: [PasswordResetGuard]\r\n          },\r\n          {\r\n            path: 'ChangePassword',\r\n            component: PasswordChangeComponent,\r\n            data: { title: 'Change password'}\r\n          },\r\n          {\r\n            path: 'ForgotPassword',\r\n            component: PasswordForgottenComponent\r\n          },\r\n          {\r\n            path: 'ConfirmEmail',\r\n            component: EmailConfirmationComponent,\r\n            canActivate: [EmailConfirmationGuard]\r\n          },\r\n          {\r\n              path: 'login',\r\n              component: LoginComponent,\r\n              canActivate: [LoginGuard]\r\n          }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(authRoutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth-routing.module.ts","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { HeaderModule } from '../main-content/header/header.module';\r\nimport { SsnBgComponent } from '../shared/components/ssn-bg/ssn-bg.component';\r\nimport { SsnCardComponent } from '../shared/components/ssn-card/ssn-card.component';\r\nimport { UriQueryService } from '../shared/services/uri-query.service';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { AuthHomeComponent } from './auth-home/auth-home.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { EmailConfirmationComponent } from './email-confirmation/email-confirmation.component';\r\nimport { AuthHomeGuard } from './guards/auth-home.guard';\r\nimport { EmailConfirmationGuard } from './guards/email-confirmation.guard';\r\nimport { LoginGuard } from './guards/login.guard';\r\nimport { PasswordResetGuard } from './guards/password-reset.guard';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { PasswordChangeComponent } from './password-change/password-change.component';\r\nimport { PasswordForgottenComponent } from './password-forgotten/password-forgotten.component';\r\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\r\nimport { PasswordService } from './password.service';\r\nimport { PasswordComponent } from './password/password.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AuthRoutingModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NgbModule,\r\n    NgSelectModule,\r\n    RouterModule,\r\n    SharedModule,\r\n    HeaderModule\r\n  ],\r\n  exports: [\r\n    PasswordComponent,\r\n    SsnBgComponent,\r\n    SsnCardComponent\r\n  ],\r\n  declarations: [\r\n    AuthHomeComponent,\r\n    EmailConfirmationComponent,\r\n    LoginComponent,\r\n    PasswordComponent,\r\n    PasswordChangeComponent,\r\n    PasswordResetComponent,\r\n    PasswordForgottenComponent,\r\n  ],\r\n  providers: [\r\n    // Guards\r\n    AuthHomeGuard,\r\n    EmailConfirmationGuard,\r\n    LoginGuard,\r\n    PasswordResetGuard,\r\n    // Services\r\n    PasswordService,\r\n    UriQueryService,\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth.module.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/email-confirmation/email-confirmation.component.css\n// module id = ./src/app/auth/email-confirmation/email-confirmation.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\r\\n<div class=\\\"container pt-5\\\">\\r\\n  <app-ssn-bg header=\\\"ACCOUNT CONFIRMATION\\\" icon=\\\"user.png\\\">\\r\\n\\r\\n    <div *ngIf=isRequesting></div>\\r\\n    <div *ngIf=!isRequesting>\\r\\n      <div *ngIf=\\\"emailConfirmationSuccessful\\\">\\r\\n\\r\\n        <app-ssn-card>\\r\\n            <h3>Thank you for confirming your email address.</h3>\\r\\n            <p>Now please select a password for the account created by your local administrator:</p>\\r\\n        </app-ssn-card>\\r\\n  \\r\\n        <app-password purpose=\\\"Set\\\"></app-password>\\r\\n  \\r\\n        <!-- <div class=\\\"row\\\">\\r\\n          <div class=\\\"col\\\">\\r\\n            <h3>You will be redirected to login page in... </h3>\\r\\n          </div>\\r\\n          <div class=\\\"col\\\">\\r\\n            <h1>{{secondsRemaining}} seconds</h1>\\r\\n          </div>\\r\\n        </div> -->\\r\\n      </div>\\r\\n  \\r\\n      <app-ssn-card *ngIf=\\\"!emailConfirmationSuccessful\\\" header=\\\"Account confirmation\\\">\\r\\n        <p>Email confirmation unsuccessful.</p>\\r\\n        <p>This may occur if the link you've been provided has expired. Please contact your local system administrator.</p>\\r\\n        <div *ngIf=\\\"errors\\\" class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\r\\n          <span>{{errors}}</span>\\r\\n        </div>\\r\\n      </app-ssn-card>\\r\\n    </div>\\r\\n    \\r\\n    </app-ssn-bg>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/email-confirmation/email-confirmation.component.html\n// module id = ./src/app/auth/email-confirmation/email-confirmation.component.html\n// module chunks = auth.module","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router  } from '@angular/router';\r\nimport { TokenQueryModel } from '../../shared/models/';\r\nimport { AccountService, UriQueryService } from '../../shared/services/';\r\n\r\n@Component({\r\n  selector: 'app-email-confirmation',\r\n  templateUrl: './email-confirmation.component.html',\r\n  styleUrls: ['./email-confirmation.component.css']\r\n})\r\nexport class EmailConfirmationComponent implements OnInit {\r\n\r\n  secondsRemaining = 10;\r\n\r\n  errors: string;\r\n  emailConfirmationSuccessful = false;\r\n  isRequesting = true;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private accountService: AccountService,\r\n    private uriQueryService: UriQueryService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // const tokenQueryModel = this.uriQueryService.getTokenQueryModel(this.activatedRoute.snapshot.queryParams);\r\n    // this.confirmEmail(tokenQueryModel);\r\n    // console.log('emailConfirmed?', this.emailConfirmationSuccessful);\r\n\r\n    this.initAsync();\r\n\r\n    // this.accountService.confirmEmail(tokenQueryModel)\r\n    //   .subscribe(result => {\r\n    //     // If email confirmation token was valid\r\n    //     if (result) {\r\n    //       // Update html to reflect email successfully confirmed\r\n    //       console.log('email confirmation was successful');\r\n    //       // Get password reset token\r\n    //       this.accountService.getPasswordResetToken(tokenQueryModel.userId)\r\n    //         .subscribe(passwordResetToken => {\r\n    //           if (passwordResetToken) {\r\n    //             console.log({passwordResetToken: passwordResetToken});\r\n    //             // Redirect? Or present link to navigate?\r\n    //             // Redirect:\r\n    //             // Navigate to reset password and supply token as query parameter in URI\r\n    //             // this.router.navigate(['ResetPassword'], { queryParams: userId, token});\r\n    //             // Present link? ...\r\n    //           }\r\n    //         });\r\n    //     }\r\n    //   }, error => {\r\n    //     // Update html to reflect email confirmation was unsuccessful\r\n    //     console.log('email confirmation was unsuccessful');\r\n    //   }\r\n    // );\r\n  }\r\n\r\n  async initAsync() {\r\n    const tokenQueryModel = this.uriQueryService.getTokenQueryModel(this.activatedRoute.snapshot.queryParams);\r\n    await this.confirmEmail(tokenQueryModel);\r\n    this.isRequesting = false;\r\n    console.log('emailConfirmed?', this.emailConfirmationSuccessful);\r\n  }\r\n\r\n  async confirmEmail(tokenQueryModel: TokenQueryModel) {\r\n    await this.accountService.confirmEmail(tokenQueryModel)\r\n      .toPromise().then(resultModel => {\r\n        if (resultModel) {\r\n          this.emailConfirmationSuccessful = true;\r\n          this.uriQueryService.setTokenQueryModel(resultModel);\r\n        }\r\n      }, error => {\r\n        this.emailConfirmationSuccessful = false;\r\n        this.errors = error;\r\n      }\r\n    );\r\n      // .subscribe(result => {\r\n      //   if (result) {\r\n      //     this.emailConfirmationSuccessful = true;\r\n      //   }\r\n      // }, error => {\r\n      //   this.errors = error;\r\n      // });\r\n  }\r\n\r\n  startRedirect(queryModel: TokenQueryModel) {\r\n    const intervalId = setInterval((activatedRoute: ActivatedRoute) => {\r\n      if (this.secondsRemaining === 0) {\r\n        clearInterval(intervalId);\r\n        this.router.navigate(['../ResetPassword'], {\r\n          queryParams: {\r\n            userId: queryModel.userId,\r\n            token: queryModel.token\r\n          }\r\n        });\r\n      } else {\r\n        this.secondsRemaining--;\r\n      }\r\n    }, 1000);\r\n\r\n    /* activatedRoute.queryParamMap\r\n          .map((params: Params) => params.params)\r\n          .subscribe((params) => {\r\n            this.router.navigate(['/ResetPassword'], {\r\n              queryParams: {\r\n                userId: params.userId,\r\n                token: params.token\r\n              }\r\n            }\r\n            );\r\n            console.log(params);\r\n          }\r\n        ); */\r\n\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/email-confirmation/email-confirmation.component.ts","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Injectable()\r\nexport class AuthHomeGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n      this.router.navigate(['/auth/login']);\r\n      return true;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/auth-home.guard.ts","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Injectable()\r\nexport class EmailConfirmationGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private router: Router\r\n  ) { }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n      if (this.paramsNull([next.queryParams['userId'], next.queryParams['token']])) {\r\n        this.router.navigate(['/error']);\r\n        return false;\r\n      }\r\n      return true;\r\n  }\r\n\r\n  // Checks if any of the query parameters are null/undefined or empty string\r\n  paramsNull(params: any[]): boolean {\r\n    return params.some(param => {\r\n      // Checks for null/undefined and empty string\r\n      return !param || param === '';\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/email-confirmation.guard.ts","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { AuthService, BaseService, ErrorService, LoginService } from 'app/shared/services/';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BaseGuard } from '../../shared/interfaces/base-guard.interface';\r\n\r\n@Injectable()\r\nexport class LoginGuard extends BaseService implements CanActivate, BaseGuard {\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    private loginService: LoginService,\r\n    private errorService: ErrorService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    if (!this.authService.hasToken()) {\r\n      return true;\r\n    } else {\r\n      return this.authService.hasValidToken()\r\n        .toPromise()\r\n        .then(() => {\r\n          this.router.navigateByUrl('');\r\n          return false;\r\n        })\r\n        .catch((error: HttpErrorResponse) => {\r\n          console.log(error);\r\n          const _canActivate: boolean = this.navigateByError(error);\r\n          return _canActivate;\r\n        });\r\n    }\r\n  }\r\n\r\n  navigateByError(error: HttpErrorResponse | any): boolean {\r\n    // Redirects user to correct page according to the error\r\n    if (error instanceof HttpErrorResponse) {\r\n      const httpError = error as HttpErrorResponse;\r\n      if (httpError.status >= 500) {\r\n        this.errorService.setDefaultHTTPError(error);\r\n        this.router.navigate(['/error']);\r\n      } else if (httpError.status === 401 || httpError.status === 403) {\r\n        //  Unauthorized - token invalid\r\n        /*  User tries to access login route with an invalid token\r\n        *   This is OK, just remove relevant variables from localStorage\r\n        *   so user can receive a new token upon login. */\r\n        this.loginService.logout();\r\n        return true;\r\n      } else {\r\n        this.errorService.setDefaultHTTPError(httpError);\r\n        this.router.navigate(['/error']);\r\n      }\r\n    } else {\r\n      this.errorService.setDefaultError();\r\n      this.router.navigate(['/error']);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/login.guard.ts","import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { PasswordService } from '../password.service';\r\n\r\n@Injectable()\r\nexport class PasswordResetGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private passwordService: PasswordService\r\n  ) { }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    // Request for reset made within app\r\n    if (this.passwordService.isResetRequested()) {\r\n      return true;\r\n    }\r\n    // Expect user to have clicked link received by email\r\n    // Verify query params are present\r\n    if (this.paramsNull([next.queryParams['userId'], next.queryParams['token']])) {\r\n      this.router.navigate(['/error']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Checks if any of the query parameters are null/undefined or empty string\r\n  paramsNull(params: any[]): boolean {\r\n    return params.some(param => {\r\n      // Checks for null/undefined and empty string\r\n      return !param || param === '';\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/password-reset.guard.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/login/login.component.css\n// module id = ./src/app/auth/login/login.component.css\n// module chunks = auth.module","module.exports = \"<div class=\\\"container pt-5\\\">\\r\\n  <div class=\\\"jumbotron bg-ssn-light text-ssn\\\">\\r\\n    <div class=\\\"d-table mb-3 mx-auto\\\">\\r\\n      <div class=\\\"d-table-row\\\">\\r\\n        <div class=\\\"d-table-cell\\\">\\r\\n          <img src=\\\"assets/images/flags/ag.png\\\" height=\\\"80px\\\">\\r\\n        </div>\\r\\n        <div class=\\\"d-table-cell px-3\\\">\\r\\n          <h2>IMO Maritime Single Window</h2>\\r\\n          <h6>Version 1.1. Deployed: 04.03.2019\\r\\n          </h6>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <form #f=\\\"ngForm\\\" novalidate (ngSubmit)=\\\"login(f)\\\">\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <label for=\\\"email\\\" class=\\\"col-form-label-sm no-wrap col-sm-3 col-md-2 col-lg-2\\\">Email address:</label>\\r\\n        <div class=\\\"col my-auto\\\">\\r\\n          <input id=\\\"email\\\" name=\\\"userName\\\" type=\\\"email\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"Enter email address\\\" [(ngModel)]=\\\"credentials.userName\\\"\\r\\n            #email=\\\"ngModel\\\" autocomplete=\\\"username\\\" tmFocus required>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <label for=\\\"password\\\" class=\\\"col-form-label-sm no-wrap col-sm-3 col-md-2 col-lg-2\\\">Password:</label>\\r\\n        <div class=\\\"col my-auto\\\">\\r\\n          <input id=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" #pw class=\\\"form-control form-control-sm\\\" placeholder=\\\"Enter password\\\"\\r\\n            [(ngModel)]=\\\"credentials.password\\\" autocomplete=\\\"current-password\\\" required>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <button type=\\\"submit\\\" (click)=\\\"pw.select()\\\" class=\\\"btn btn-light\\\" [disabled]=\\\"f.invalid || isRequesting\\\">SIGN IN</button>\\r\\n      </div>\\r\\n\\r\\n      <nav>\\r\\n        <a class=\\\"btn btn-light\\\" routerLink=\\\"../ForgotPassword\\\" routerLinkActive=\\\"active\\\">Forgot password?</a>\\r\\n      </nav>\\r\\n\\r\\n      <div *ngIf=\\\"errors\\\" class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\r\\n        <h5>Error</h5>\\r\\n        <span>{{errors}}</span>\\r\\n      </div>\\r\\n\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/login/login.component.html\n// module id = ./src/app/auth/login/login.component.html\n// module chunks = auth.module","// Based on https://github.com/mmacneil/AngularASPNETCore2WebApiAuth/blob/master/src/src/app/account/login-form/login-form.component.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CONTENT_NAMES } from 'app/shared/constants/content-names';\r\nimport { Credentials } from 'app/shared/interfaces/credentials.interface';\r\nimport { AccountService, AuthService, ContentService, LoginService } from 'app/shared/services/';\r\nimport { MenuClaims } from '../../shared/constants/menu-claims';\r\nimport { PasswordService } from '../password.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  login_title = 'LOGIN';\r\n\r\n  brandNew: boolean;\r\n  errors: string;\r\n  isRequesting: boolean;\r\n  submitted = false;\r\n  credentials: Credentials = { userName: '', password: '' };\r\n\r\n  constructor(\r\n    private loginService: LoginService,\r\n    private contentService: ContentService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private accountService: AccountService,\r\n    private authService: AuthService,\r\n    private passwordService: PasswordService\r\n  ) {}\r\n\r\n  private logError(error: any) {\r\n    this.errors = error;\r\n    this.credentials.password = '';\r\n  }\r\n\r\n  async login({ value, valid }: { value: Credentials; valid: boolean }) {\r\n    this.submitted = true;\r\n    this.errors = '';\r\n    if (valid) {\r\n      this.isRequesting = true;\r\n\r\n      const jwtResponse = await this.loginService\r\n        .login(value)\r\n        .toPromise()\r\n        .then(\r\n          jwt => {\r\n            if (jwt) {\r\n              return jwt;\r\n            }\r\n            // Login failed\r\n          },\r\n          error => {this.logError(error); console.log(error); }\r\n        );\r\n      if (!this.errors) {\r\n        await this.accountService\r\n          .getUserClaims()\r\n          .toPromise()\r\n          .then(\r\n            claims => {\r\n              if (claims) {\r\n                this.accountService.setUserClaims(claims);\r\n                if (this.authService.hasPortCallMenuClaim(claims)) {\r\n                  this.contentService.setContent(CONTENT_NAMES.VIEW_PORT_CALLS);\r\n                  this.router.navigate(['']);\r\n                }\r\n              } else {\r\n                this.loginService.logout();\r\n                this.router.navigate(['/error']);\r\n              }\r\n              // Error getting user claims\r\n            },\r\n            error => this.logError(error)\r\n          );\r\n      }\r\n      this.isRequesting = false;\r\n    }\r\n  }\r\n\r\n  hasPortCallMenuClaim(claims: any[]): boolean {\r\n    return claims\r\n      .filter(claim => claim.type === MenuClaims.TYPE)\r\n      .some(claim => claim.value === MenuClaims.PORT_CALL);\r\n  }\r\n\r\n  setResetRequested() {\r\n    this.passwordService.setResetRequested(true);\r\n  }\r\n\r\n  ngOnInit() {\r\n    // subscribe to router event\r\n    this.activatedRoute.queryParams.subscribe((param: any) => {\r\n      this.brandNew = param['brandNew'];\r\n      // this.credentials.userName = param['userName'];\r\n    });\r\n    this.passwordService.setResetRequested(false);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/login/login.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-change/password-change.component.css\n// module id = ./src/app/auth/password-change/password-change.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\r\\n<div class=\\\"container pt-5\\\">\\r\\n    <app-ssn-bg header=\\\"PASSWORD CHANGE\\\" icon=\\\"user.png\\\">\\r\\n        <app-password purpose=\\\"Change\\\">\\r\\n        </app-password>\\r\\n    </app-ssn-bg>\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-change/password-change.component.html\n// module id = ./src/app/auth/password-change/password-change.component.html\n// module chunks = auth.module","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-password-change',\r\n  templateUrl: './password-change.component.html',\r\n  styleUrls: ['./password-change.component.css']\r\n})\r\nexport class PasswordChangeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password-change/password-change.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-forgotten/password-forgotten.component.css\n// module id = ./src/app/auth/password-forgotten/password-forgotten.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\r\\n<div class=\\\"container pt-5\\\">\\r\\n  <app-ssn-bg header=\\\"FORGOT PASSWORD\\\">\\r\\n    <app-ssn-card header=\\\"Forgot password\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"text-center col col-sm-2 col-md-4 col-lg-2 col-xl-6\\\">\\r\\n          <p>Please input the email you registered an account with. We will send you an email to that address, providing you\\r\\n            with a link to a page where you can reset your password.\\r\\n          </p>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"form-group row\\\">\\r\\n\\r\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"email\\\">Email</label>\\r\\n        <div class=\\\"col\\\">\\r\\n          <input id=\\\"email\\\" name=\\\"email\\\" class=\\\"form-control form-control-sm\\\" type=\\\"email\\\" placeholder=\\\"Enter email address\\\" [(ngModel)]=\\\"email\\\"\\r\\n            tmFocus validateEmail>\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <div class=\\\"col col-sm-2 col-md-2 col-lg-2 col-xl-2\\\">\\r\\n          <button class=\\\"btn btn-ssn\\\" (click)=\\\"requestPasswordReset();\\\">Send email link</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </app-ssn-card>\\r\\n\\r\\n    <!-- <app-feedback [props]=\\\"properties\\\"></app-feedback> -->\\r\\n    <app-feedback [started]=\\\"started\\\" [actionSucceeded]=\\\"actionSucceeded\\\" [successMessage]=\\\"successMessage\\\" [errors]=\\\"errors\\\" [errorDescription]=\\\"errorDescription\\\"></app-feedback>\\r\\n\\r\\n  </app-ssn-bg>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-forgotten/password-forgotten.component.html\n// module id = ./src/app/auth/password-forgotten/password-forgotten.component.html\n// module chunks = auth.module","import { Component, Input, OnInit, Output } from '@angular/core';\r\nimport { FeedBack } from '../../shared/models/feedback';\r\nimport { AccountService } from '../../shared/services/account.service';\r\n\r\n@Component({\r\n  selector: 'app-password-forgotten',\r\n  templateUrl: './password-forgotten.component.html',\r\n  styleUrls: ['./password-forgotten.component.css']\r\n})\r\nexport class PasswordForgottenComponent extends FeedBack\r\n  implements OnInit {\r\n  email: string;\r\n\r\n  constructor(private accountService: AccountService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  requestPasswordReset() {\r\n    this.accountService.requestPasswordReset(this.email).subscribe(\r\n      res => {\r\n        const msg =\r\n          'Please check your email for instruction for how to reset your password.';\r\n        this.reportSuccess(msg);\r\n      },\r\n      error => {\r\n        const msg =\r\n          'An error occurred while trying to request a password reset';\r\n        this.reportError(error, msg);\r\n      }\r\n    );\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password-forgotten/password-forgotten.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-reset/password-reset.component.css\n// module id = ./src/app/auth/password-reset/password-reset.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\r\\n<div class=\\\"container pt-5\\\">\\r\\n    <app-ssn-bg header=\\\"PASSWORD RESET\\\" icon=\\\"user.png\\\">\\r\\n        <app-password purpose=\\\"Reset\\\"></app-password>\\r\\n    </app-ssn-bg>\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-reset/password-reset.component.html\n// module id = ./src/app/auth/password-reset/password-reset.component.html\n// module chunks = auth.module","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-password-reset',\r\n  templateUrl: './password-reset.component.html',\r\n  styleUrls: ['./password-reset.component.css']\r\n})\r\nexport class PasswordResetComponent implements OnInit {\r\n\r\n  constructor(\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password-reset/password-reset.component.ts","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class PasswordService {\r\n\r\n  // private resetRequestedSource = new BehaviorSubject<boolean>(false);\r\n  // resetRequested$ = this.resetRequestedSource.asObservable();\r\n\r\n  resetRequested = false;\r\n\r\n  constructor() { }\r\n\r\n  setResetRequested(value: boolean) {\r\n    this.resetRequested = value;\r\n  }\r\n  isResetRequested(): boolean {\r\n    return this.resetRequested;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password/password.component.css\n// module id = ./src/app/auth/password/password.component.css\n// module chunks = auth.module","module.exports = \"\\r\\n    <app-ssn-card header=\\\"Password {{purpose | lowercase}} form\\\">\\r\\n\\r\\n      <div *ngIf=\\\"isChangeComponent\\\" class=\\\"form-group row\\\">\\r\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"current_password\\\">Current password</label>\\r\\n        <div class=\\\"col\\\">\\r\\n          <input id=\\\"current_password\\\" name=\\\"current_password\\\" class=\\\"form-control form-control-sm\\\" type=\\\"password\\\" placeholder=\\\"Enter your current password\\\"\\r\\n            [(ngModel)]=\\\"currentPassword\\\" (ngModelChange)=\\\"validateFields(); fieldFocused = true;\\\" (blur)=\\\"validateFields(); fieldFocused = false;\\\">\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"first_password\\\">New password</label>\\r\\n        <div class=\\\"col\\\">\\r\\n          <input id=\\\"first_password\\\" name=\\\"first_password\\\" class=\\\"form-control form-control-sm\\\" type=\\\"password\\\" placeholder=\\\"Enter a new password\\\"\\r\\n            [(ngModel)]=\\\"inputOne\\\" (ngModelChange)=\\\"validateFields(); fieldFocused = true;\\\" (blur)=\\\"validateFields(); fieldFocused = false;\\\">\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group row mb-0\\\">\\r\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"second_password\\\">Retype password</label>\\r\\n        <div class=\\\"col\\\">\\r\\n          <input id=\\\"second_password\\\" name=\\\"second_password\\\" class=\\\"form-control form-control-sm\\\" type=\\\"password\\\" placeholder=\\\"Retype the password\\\"\\r\\n            [(ngModel)]=\\\"inputTwo\\\" (ngModelChange)=\\\"validateFields(); fieldFocused = true;\\\" (blur)=\\\"validateFields(); fieldFocused = false;\\\">\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngIf=\\\"fieldsFilled\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-2 col-md-2 col-lg-2 col-xl-2\\\">\\r\\n        </div>\\r\\n        <div class=\\\"col\\\" *ngIf=\\\"!passwordMatch && !fieldFocused\\\">\\r\\n          <img height=\\\"16px\\\" src=\\\"assets/images/icons/128x128/red/warning.png\\\">\\r\\n          <small class=\\\"text-danger\\\">New passwords do not match</small>\\r\\n        </div>\\r\\n        <div class=\\\"col\\\" *ngIf=\\\"passwordMatch\\\">\\r\\n          <img height=\\\"16px\\\" src=\\\"assets/images/icons/128x128/green/checkmark.png\\\">\\r\\n          <small class=\\\"text-success\\\">New passwords match</small>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div *ngIf=\\\"passwordMatch && !fieldsFilled\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"col\\\" *ngIf=\\\"passwordMatch\\\">\\r\\n          <img height=\\\"16px\\\" src=\\\"assets/images/icons/128x128/green/checkmark.png\\\">\\r\\n          <small class=\\\"text-success\\\">New passwords match, but please also input your current password.</small>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n       <div *ngIf=\\\"!passwordMatch || passwordMatch && !fieldsFilled\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col\\\">\\r\\n            <button class=\\\"btn btn-ssn\\\" disabled>{{purpose}} password</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Passwords typed in and passords match -->\\r\\n      <div *ngIf=\\\"passwordMatch && fieldsFilled\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col\\\">\\r\\n            <button class=\\\"btn btn-ssn\\\" (click)=\\\"editPassword()\\\" [disabled]=\\\"actionSucceeded\\\">{{purpose}} password</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- TEST -->\\r\\n      <!-- <div *ngIf=\\\"!passwordMatch || passwordMatch && !fieldsFilled\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <button class=\\\"btn btn-ssn\\\" [disabled]=\\\"!passwordMatch || passwordMatch && !fieldsFilled || !actionSucceeded\\\">{{purpose}} password</button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div> -->\\r\\n\\r\\n      <div *ngIf=\\\"submissionReady\\\">\\r\\n        <div *ngIf=\\\"actionSucceeded\\\" class=\\\"alert-success\\\" role=\\\"alert\\\">\\r\\n          <h5>Success</h5>\\r\\n          <span>{{successMessage}}</span>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"errors\\\" class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\r\\n          <h5>Error</h5>\\r\\n          <span>{{errors}}</span>\\r\\n        </div>\\r\\n      </div>\\r\\n      \\r\\n    </app-ssn-card>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password/password.component.html\n// module id = ./src/app/auth/password/password.component.html\n// module chunks = auth.module","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Route, Router } from '@angular/router';\r\nimport {\r\n  PASSWORD_COMPONENT_NAME,\r\n  PASSWORD_COMPONENT_TYPE\r\n} from '../../shared/constants/password-component-types';\r\nimport { PasswordChangeModel } from '../../shared/models/password-change-model';\r\nimport { PasswordResetModel } from '../../shared/models/password-reset-model';\r\nimport { TokenQueryModel } from '../../shared/models/token-query-model';\r\nimport { AccountService, UriQueryService } from '../../shared/services/';\r\n\r\n@Component({\r\n  selector: 'app-password',\r\n  templateUrl: './password.component.html',\r\n  styleUrls: ['./password.component.css']\r\n})\r\nexport class PasswordComponent implements OnInit {\r\n  @Input() purpose: string;\r\n\r\n  currentPassword = '';\r\n  inputOne = '';\r\n  inputTwo = '';\r\n  passwordMatch = false;\r\n  fieldsFilled = false;\r\n  errors: string;\r\n  isChangeComponent = false;\r\n  fieldFocused = true;\r\n\r\n  // Error component\r\n  submissionReady = false;\r\n  actionSucceeded = false;\r\n  successMessage: string;\r\n  errorDescription: string;\r\n\r\n  private componentName: string;\r\n  private componentType: number;\r\n\r\n  private tokenQueryModel: TokenQueryModel;\r\n  private passwordResetToken?: string;\r\n\r\n  constructor(\r\n    private accountService: AccountService,\r\n    private uriQueryService: UriQueryService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  validateFields() {\r\n    this.fieldsFilled = this.checkFieldsFilled();\r\n    this.passwordMatch = this.checkPasswordsMatch();\r\n  }\r\n\r\n  private checkFieldsFilled(): boolean {\r\n    if (this.componentType === PASSWORD_COMPONENT_TYPE.CHANGE) {\r\n      return (\r\n        this.inputOne !== '' &&\r\n        this.inputTwo !== '' &&\r\n        this.currentPassword !== ''\r\n      );\r\n    } else {\r\n      return this.inputOne !== '' && this.inputTwo !== '';\r\n    }\r\n  }\r\n\r\n  private checkPasswordsMatch(): boolean {\r\n    return (\r\n      !(this.inputOne === '' || this.inputTwo === '') &&\r\n      this.inputOne === this.inputTwo\r\n    );\r\n  }\r\n\r\n  editPassword() {\r\n    switch (this.componentType) {\r\n      case PASSWORD_COMPONENT_TYPE.CHANGE:\r\n        this.changePassword();\r\n        break;\r\n      case PASSWORD_COMPONENT_TYPE.RESET:\r\n        this.resetPassword();\r\n        break;\r\n      case PASSWORD_COMPONENT_TYPE.SET:\r\n        this.setPassword();\r\n        break;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  changePassword() {\r\n    const model: PasswordChangeModel = {\r\n      currentPassword: this.currentPassword,\r\n      newPassword: this.inputOne\r\n    };\r\n\r\n    this.accountService.changePassword(model).subscribe(\r\n      response => {\r\n        const message = 'Password change successful';\r\n        this.reportSuccess(message);\r\n      },\r\n      errors => {\r\n        const message = `Password change unsuccessful`;\r\n        this.reportError(errors, message);\r\n      }\r\n    );\r\n  }\r\n\r\n  resetPassword() {\r\n    // Validation has been done, so we can safely construct a valid object from model\r\n    const model: PasswordResetModel = {\r\n      userId: this.tokenQueryModel.userId,\r\n      passwordResetToken: this.tokenQueryModel.token,\r\n      newPassword: this.inputOne // Doesn't matter which input value we pick; they're the same\r\n    };\r\n\r\n    this.accountService.resetPassword(model).subscribe(\r\n      response => {\r\n        const message = 'Password reset successful';\r\n        this.reportSuccess(message);\r\n        return true;\r\n      },\r\n      errors => {\r\n        const message = `Password reset unsuccessful`;\r\n        this.reportError(errors, message);\r\n        return false;\r\n      }\r\n    );\r\n  }\r\n\r\n  setPassword() {\r\n    if (this.passwordResetToken === null) {\r\n      this.errors = 'Application error';\r\n    } else {\r\n      const model: PasswordResetModel = {\r\n        userId: this.tokenQueryModel.userId,\r\n        passwordResetToken: this.passwordResetToken,\r\n        newPassword: this.inputOne\r\n      };\r\n      this.accountService.resetPassword(model).subscribe(\r\n        result => {\r\n          const message = 'Password assignment successful!';\r\n          this.reportSuccess(message);\r\n        },\r\n        errors => {\r\n          const message = 'Password assignment unsuccessful!';\r\n          this.reportError(errors, message);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  reportSuccess(message: string) {\r\n    this.submissionReady = true;\r\n    this.actionSucceeded = true;\r\n    this.successMessage = message;\r\n  }\r\n\r\n  reportError(error: any, message: string) {\r\n    this.submissionReady = true;\r\n    this.actionSucceeded = false;\r\n    this.errors = error;\r\n    this.errorDescription = message;\r\n  }\r\n\r\n  ngOnInit() {\r\n    const purpose = this.purpose.toUpperCase();\r\n    switch (purpose) {\r\n      case PASSWORD_COMPONENT_NAME.CHANGE:\r\n        // this.componentName = PASSWORD_COMPONENT_NAME.CHANGE;\r\n        this.isChangeComponent = true;\r\n        this.componentType =\r\n          PASSWORD_COMPONENT_TYPE[PASSWORD_COMPONENT_NAME.CHANGE];\r\n        break;\r\n      case PASSWORD_COMPONENT_NAME.RESET:\r\n        // this.componentName = PASSWORD_COMPONENT_NAME.RESET;\r\n        this.componentType =\r\n          PASSWORD_COMPONENT_TYPE[PASSWORD_COMPONENT_NAME.RESET];\r\n        break;\r\n      case PASSWORD_COMPONENT_NAME.SET:\r\n        // this.componentName = PASSWORD_COMPONENT_NAME.SET;\r\n        this.componentType =\r\n          PASSWORD_COMPONENT_TYPE[PASSWORD_COMPONENT_NAME.SET];\r\n        this.uriQueryService.tokenQueryModelData$.subscribe(token => {\r\n          this.passwordResetToken = token.token;\r\n        });\r\n        break;\r\n      default:\r\n        this.router.navigate(['/error']);\r\n    }\r\n    this.tokenQueryModel = this.uriQueryService.getTokenQueryModel(\r\n      this.activatedRoute.snapshot.queryParams\r\n    );\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password/password.component.ts","const PASSWORD_COMPONENT_NAME = {\r\n    SET: 'SET',\r\n    RESET: 'RESET',\r\n    CHANGE: 'CHANGE'\r\n};\r\n\r\nenum PASSWORD_COMPONENT_TYPE {\r\n    SET,\r\n    RESET,\r\n    CHANGE\r\n}\r\n\r\nexport { PASSWORD_COMPONENT_NAME, PASSWORD_COMPONENT_TYPE };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/constants/password-component-types.ts"],"sourceRoot":"webpack:///"}