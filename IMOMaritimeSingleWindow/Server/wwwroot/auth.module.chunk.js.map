{"version":3,"sources":["./src/app/auth/auth-home/auth-home.component.css","./src/app/auth/auth-home/auth-home.component.html","./src/app/auth/auth-home/auth-home.component.ts","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/email-confirmation/email-confirmation.component.css","./src/app/auth/email-confirmation/email-confirmation.component.html","./src/app/auth/email-confirmation/email-confirmation.component.ts","./src/app/auth/guards/auth-home.guard.ts","./src/app/auth/guards/email-confirmation.guard.ts","./src/app/auth/guards/login.guard.ts","./src/app/auth/guards/password-reset.guard.ts","./src/app/auth/login/login.component.css","./src/app/auth/login/login.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/password-change/password-change.component.css","./src/app/auth/password-change/password-change.component.html","./src/app/auth/password-change/password-change.component.ts","./src/app/auth/password-forgotten/password-forgotten.component.css","./src/app/auth/password-forgotten/password-forgotten.component.html","./src/app/auth/password-forgotten/password-forgotten.component.ts","./src/app/auth/password-reset/password-reset.component.css","./src/app/auth/password-reset/password-reset.component.html","./src/app/auth/password-reset/password-reset.component.ts","./src/app/auth/password.service.ts","./src/app/auth/password/password.component.css","./src/app/auth/password/password.component.html","./src/app/auth/password/password.component.ts","./src/app/shared/constants/password-component-types.ts"],"names":[],"mappings":";;;;;AAAA,mB;;;;;;;ACAA,oIAAoI,cAAc,qM;;;;;;;;;;;;;;;;;;;;ACAhG;AACI;AAMtD;IAEE,2BACU,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IACtC,CAAC;IAEL,oCAAQ,GAAR;IACA,CAAC;IAED,6CAAiB,GAAjB;QACE,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAXU,iBAAiB;QAL7B,wEAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAI2B,0EAAe;OAH/B,iBAAiB,CAa7B;IAAD,wBAAC;CAAA;AAb6B;;;;;;;;;;;;;;;;;;;;;;;;;;ACPW;AACc;AACa;AAC2B;AAEpB;AACzB;AAEO;AAC6B;AACS;AACZ;AAEnF,IAAM,UAAU,GAAW;IACzB;QACE,IAAI,EAAE,EAAE;QACR,4BAA4B;QAC5B,qBAAqB;QACrB,6BAA6B;QAC7B,6BAA6B;QAC7B,SAAS,EAAE,yFAAiB;QAC5B,QAAQ,EAAE;YACN;gBACE,IAAI,EAAE,EAAE;gBACR,SAAS,EAAE,MAAM;gBACjB,UAAU,EAAE,OAAO;aACpB;YACD;gBACI,IAAI,EAAE,eAAe;gBACrB,SAAS,EAAE,wGAAsB;aAElC;YACD;gBACE,IAAI,EAAE,gBAAgB;gBACtB,SAAS,EAAE,2GAAuB;gBAClC,IAAI,EAAE,EAAE,KAAK,EAAE,iBAAiB,EAAC;aAClC;YACD;gBACE,IAAI,EAAE,gBAAgB;gBACtB,SAAS,EAAE,oHAA0B;aACtC;YACD;gBACE,IAAI,EAAE,cAAc;gBACpB,SAAS,EAAE,oHAA0B;gBACrC,WAAW,EAAE,CAAC,gGAAsB,CAAC;aACtC;YACD;gBACI,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,8EAAc;gBACzB,WAAW,EAAE,CAAC,uEAAU,CAAC;aAC5B;SACN;KACF;CACF,CAAC;AAMF;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAJ7B,uEAAQ,CAAC;YACR,OAAO,EAAE,CAAC,qEAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC5C,OAAO,EAAE,CAAC,qEAAY,CAAC;SACxB,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DiB;AACN;AACI;AACE;AACQ;AACD;AACc;AACU;AACM;AACb;AAChB;AACa;AACV;AACqC;AACtC;AACkB;AACzB;AACiB;AACV;AAC6B;AACS;AACZ;AAC9B;AACa;AAsClE;IAAA;IAA0B,CAAC;IAAd,UAAU;QApCtB,uEAAQ,CAAC;YACR,OAAO,EAAE;gBACP,gFAAiB;gBACjB,qEAAY;gBACZ,mEAAW;gBACX,6EAAS;gBACT,4EAAc;gBACd,qEAAY;gBACZ,4EAAY;gBACZ,wFAAY;aACb;YACD,OAAO,EAAE;gBACP,wFAAiB;gBACjB,kGAAc;gBACd,wGAAgB;aACjB;YACD,YAAY,EAAE;gBACZ,0FAAiB;gBACjB,qHAA0B;gBAC1B,+EAAc;gBACd,wFAAiB;gBACjB,4GAAuB;gBACvB,yGAAsB;gBACtB,qHAA0B;aAC3B;YACD,SAAS,EAAE;gBACT,SAAS;gBACT,+EAAa;gBACb,iGAAsB;gBACtB,wEAAU;gBACV,yFAAkB;gBAClB,WAAW;gBACX,2EAAe;gBACf,2FAAe;aAChB;SACF,CAAC;OACW,UAAU,CAAI;IAAD,iBAAC;CAAA;AAAJ;;;;;;;;AC7DvB,mB;;;;;;;ACAA,kvBAAkvB,kBAAkB,gbAAgb,QAAQ,4F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA1oC;AACQ;AAEe;AAOzE;IAQE,oCACU,MAAc,EACd,cAA8B,EAC9B,cAA8B,EAC9B,eAAgC;QAHhC,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAe,GAAf,eAAe,CAAiB;QAV1C,qBAAgB,GAAG,EAAE,CAAC;QAGtB,gCAA2B,GAAG,KAAK,CAAC;QACpC,iBAAY,GAAG,IAAI,CAAC;IAOhB,CAAC;IAEL,6CAAQ,GAAR;QACE,6GAA6G;QAC7G,sCAAsC;QACtC,oEAAoE;QAEpE,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,oDAAoD;QACpD,2BAA2B;QAC3B,+CAA+C;QAC/C,oBAAoB;QACpB,+DAA+D;QAC/D,0DAA0D;QAC1D,oCAAoC;QACpC,0EAA0E;QAC1E,6CAA6C;QAC7C,sCAAsC;QACtC,qEAAqE;QACrE,wDAAwD;QACxD,2BAA2B;QAC3B,uFAAuF;QACvF,yFAAyF;QACzF,mCAAmC;QACnC,cAAc;QACd,cAAc;QACd,QAAQ;QACR,kBAAkB;QAClB,oEAAoE;QACpE,0DAA0D;QAC1D,MAAM;QACN,KAAK;IACP,CAAC;IAEK,8CAAS,GAAf;;;;;;wBACQ,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;wBAC1G,qBAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;;wBAAxC,SAAwC,CAAC;wBACzC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;wBAC1B,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,2BAA2B,CAAC,CAAC;;;;;KAClE;IAEK,iDAAY,GAAlB,UAAmB,eAAgC;;;;;4BACjD,qBAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,eAAe,CAAC;6BACpD,SAAS,EAAE,CAAC,IAAI,CAAC,qBAAW;4BAC3B,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gCAChB,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;gCACxC,KAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;4BACvD,CAAC;wBACH,CAAC,EAAE,eAAK;4BACN,KAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;4BACzC,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;wBACtB,CAAC,CACF;;wBAVD,SAUC,CAAC;;;;;KAQH;IAED,kDAAa,GAAb,UAAc,UAA2B;QAAzC,iBA6BC;QA5BC,IAAM,UAAU,GAAG,WAAW,CAAC,UAAC,cAA8B;YAC5D,EAAE,CAAC,CAAC,KAAI,CAAC,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC1B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE;oBACzC,WAAW,EAAE;wBACX,MAAM,EAAE,UAAU,CAAC,MAAM;wBACzB,KAAK,EAAE,UAAU,CAAC,KAAK;qBACxB;iBACF,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,CAAC;QAET;;;;;;;;;;;;iBAYS;IAEX,CAAC;IAzGU,0BAA0B;QALtC,wEAAS,CAAC;YACT,QAAQ,EAAE,wBAAwB;;;SAGnC,CAAC;yCAUkB,+DAAM;YACE,uEAAc;YACd,yEAAc;YACb,0EAAe;OAZ/B,0BAA0B,CA0GtC;IAAD,iCAAC;CAAA;AA1GsC;;;;;;;;;;;;;;;;;;;;;ACVI;AACwD;AAInG;IAEE,uBACU,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IACrB,CAAC;IAEJ,mCAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QACxB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAXU,aAAa;QADzB,yEAAU,EAAE;yCAIO,+DAAM;OAHb,aAAa,CAYzB;IAAD,oBAAC;CAAA;AAZyB;;;;;;;;;;;;;;;;;;;;;ACLiB;AACwD;AAInG;IAEE,gCACU,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IACpB,CAAC;IAEL,4CAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,2EAA2E;IAC3E,2CAAU,GAAV,UAAW,MAAa;QACtB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAK;YACtB,6CAA6C;YAC7C,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAtBU,sBAAsB;QADlC,yEAAU,EAAE;yCAIO,+DAAM;OAHb,sBAAsB,CAuBlC;IAAD,6BAAC;CAAA;AAvBkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLsB;AACd;AAMlB;AACmE;AAK5F;IAAgC,8BAAW;IACzC,oBACU,MAAc,EACd,WAAwB,EACxB,YAA0B,EAC1B,YAA0B;QAJpC,YAME,iBAAO,SACR;QANS,YAAM,GAAN,MAAM,CAAQ;QACd,iBAAW,GAAX,WAAW,CAAa;QACxB,kBAAY,GAAZ,YAAY,CAAc;QAC1B,kBAAY,GAAZ,YAAY,CAAc;;IAGpC,CAAC;IAED,gCAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QAF5B,iBAmBC;QAfC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;iBACpC,SAAS,EAAE;iBACX,IAAI,CAAC;gBACJ,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAC9B,MAAM,CAAC,KAAK,CAAC;YACf,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,KAAwB;gBAC9B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,IAAM,YAAY,GAAY,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;gBAC1D,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACP,CAAC;IACH,CAAC;IAED,oCAAe,GAAf,UAAgB,KAA8B;QAC5C,wDAAwD;QACxD,EAAE,CAAC,CAAC,KAAK,YAAY,+EAAiB,CAAC,CAAC,CAAC;YACvC,IAAM,SAAS,GAAG,KAA0B,CAAC;YAC7C,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChE,gCAAgC;gBAChC;;kEAEkD;gBAClD,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnC,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAvDU,UAAU;QADtB,yEAAU,EAAE;yCAGO,+DAAM;YACD,yEAAW;YACV,0EAAY;YACZ,0EAAY;OALzB,UAAU,CAwDtB;IAAD,iBAAC;CAAA,CAxD+B,yEAAW,GAwD1C;AAxDsB;;;;;;;;;;;;;;;;;;;;;;ACboB;AAMlB;AAE6B;AAGtD;IAEE,4BACU,MAAc,EACd,eAAgC;QADhC,WAAM,GAAN,MAAM,CAAQ;QACd,oBAAe,GAAf,eAAe,CAAiB;IACtC,CAAC;IAEL,wCAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QAE1B,oCAAoC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,qDAAqD;QACrD,kCAAkC;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,2EAA2E;IAC3E,uCAAU,GAAV,UAAW,MAAa;QACtB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAK;YACtB,6CAA6C;YAC7C,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IA9BU,kBAAkB;QAD9B,yEAAU,EAAE;yCAIO,+DAAM;YACG,0EAAe;OAJ/B,kBAAkB,CA+B9B;IAAD,yBAAC;CAAA;AA/B8B;;;;;;;;ACX/B,mB;;;;;;;ACAA,i6DAAi6D,QAAQ,wF;;;;;;;;;;;;;;ACAz6D;AAAA,uIAAuI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAErF;AACO;AACU;AAE8B;AACjC;AACV;AAOtD;IASE,wBACU,YAA0B,EAC1B,cAA8B,EAC9B,MAAc,EACd,cAA8B,EAC9B,cAA8B,EAC9B,WAAwB,EACxB,eAAgC;QANhC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QAf1C,gBAAW,GAAG,OAAO,CAAC;QAKtB,cAAS,GAAG,KAAK,CAAC;QAClB,gBAAW,GAAgB,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;IAUvD,CAAC;IAEI,iCAAQ,GAAhB,UAAiB,KAAU;QACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,EAAE,CAAC;IACjC,CAAC;IAEK,8BAAK,GAAX,UAAY,EAAwD;YAAtD,gBAAK,EAAE,gBAAK;;;;;;;wBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;6BACb,KAAK,EAAL,wBAAK;wBACP,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;wBAEL,qBAAM,IAAI,CAAC,YAAY;iCACxC,KAAK,CAAC,KAAK,CAAC;iCACZ,SAAS,EAAE;iCACX,IAAI,CACH,aAAG;gCACD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oCACR,MAAM,CAAC,GAAG,CAAC;gCACb,CAAC;gCACD,eAAe;4BACjB,CAAC,EACD,eAAK,IAAK,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAC,CACrD;;wBAXG,WAAW,GAAG,SAWjB;6BACC,CAAC,IAAI,CAAC,MAAM,EAAZ,wBAAY;wBACd,qBAAM,IAAI,CAAC,cAAc;iCACtB,aAAa,EAAE;iCACf,SAAS,EAAE;iCACX,IAAI,CACH,gBAAM;gCACJ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oCACX,KAAI,CAAC,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oCAC1C,EAAE,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wCAClD,KAAI,CAAC,cAAc,CAAC,UAAU,CAAC,yFAAa,CAAC,eAAe,CAAC,CAAC;wCAC9D,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oCAC7B,CAAC;gCACH,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACN,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;oCAC3B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gCACnC,CAAC;gCACD,4BAA4B;4BAC9B,CAAC,EACD,eAAK,IAAI,YAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAApB,CAAoB,CAC9B;;wBAlBH,SAkBG,CAAC;;;wBAEN,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;;;;;;KAE7B;IAED,6CAAoB,GAApB,UAAqB,MAAa;QAChC,MAAM,CAAC,MAAM;aACV,MAAM,CAAC,eAAK,IAAI,YAAK,CAAC,IAAI,KAAK,iFAAU,CAAC,IAAI,EAA9B,CAA8B,CAAC;aAC/C,IAAI,CAAC,eAAK,IAAI,YAAK,CAAC,KAAK,KAAK,iFAAU,CAAC,SAAS,EAApC,CAAoC,CAAC,CAAC;IACzD,CAAC;IAED,0CAAiB,GAAjB;QACE,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,iCAAQ,GAAR;QAAA,iBAOC;QANC,4BAA4B;QAC5B,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,KAAU;YACnD,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;YAClC,iDAAiD;QACnD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IApFU,cAAc;QAL1B,wEAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;yCAWwB,0EAAY;YACV,4EAAc;YACtB,+DAAM;YACE,uEAAc;YACd,4EAAc;YACjB,yEAAW;YACP,0EAAe;OAhB/B,cAAc,CAqF1B;IAAD,qBAAC;CAAA;AArF0B;;;;;;;;ACf3B,mB;;;;;;;ACAA,yR;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,0CAAQ,GAAR;IACA,CAAC;IALU,uBAAuB;QALnC,wEAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;;;SAGhC,CAAC;;OACW,uBAAuB,CAOnC;IAAD,8BAAC;CAAA;AAPmC;;;;;;;;ACPpC,mB;;;;;;;ACAA,slCAAslC,8W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACArhC;AACT;AACe;AAOvE;IAAgD,8CAAQ;IAItD,oCAAoB,cAA8B;QAAlD,YACE,iBAAO,SACR;QAFmB,oBAAc,GAAd,cAAc,CAAgB;;IAElD,CAAC;IAED,6CAAQ,GAAR,cAAY,CAAC;IAEb,yDAAoB,GAApB;QAAA,iBAaC;QAZC,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAC5D,aAAG;YACD,IAAM,GAAG,GACP,yEAAyE,CAAC;YAC5E,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,EACD,eAAK;YACH,IAAM,GAAG,GACP,4DAA4D,CAAC;YAC/D,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IAvBU,0BAA0B;QALtC,wEAAS,CAAC;YACT,QAAQ,EAAE,wBAAwB;;;SAGnC,CAAC;yCAKoC,wFAAc;OAJvC,0BAA0B,CAwBtC;IAAD,iCAAC;CAAA,CAxB+C,yEAAQ,GAwBvD;AAxBsC;;;;;;;;ACTvC,mB;;;;;;;ACAA,6Q;;;;;;;;;;;;;;;;;;;ACAyD;AAOzD;IAEE;IACG,CAAC;IAEJ,yCAAQ,GAAR;IACA,CAAC;IANU,sBAAsB;QALlC,wEAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;;OACW,sBAAsB,CAOlC;IAAD,6BAAC;CAAA;AAPkC;;;;;;;;;;;;;;;;;;;;ACPQ;AAI3C;IAOE;QALA,sEAAsE;QACtE,8DAA8D;QAE9D,mBAAc,GAAG,KAAK,CAAC;IAEP,CAAC;IAEjB,2CAAiB,GAAjB,UAAkB,KAAc;QAC9B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAC9B,CAAC;IACD,0CAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAdU,eAAe;QAD3B,yEAAU,EAAE;;OACA,eAAe,CAe3B;IAAD,sBAAC;CAAA;AAf2B;;;;;;;;ACJ5B,mB;;;;;;;ACAA,0DAA0D,qBAAqB,6eAA6e,qBAAqB,6BAA6B,sBAAsB,kdAAkd,qBAAqB,6BAA6B,sBAAsB,4dAA4d,qBAAqB,6BAA6B,sBAAsB,2qCAA2qC,SAAS,mVAAmV,SAAS,0WAA0W,SAAS,qPAAqP,gBAAgB,iJAAiJ,QAAQ,mE;;;;;;;;;;;;;;;;;;;;;;ACA16H;AACO;AAIP;AAIgB;AAOzE;IAwBE,2BACU,cAA8B,EAC9B,eAAgC,EAChC,cAA8B,EAC9B,MAAc;QAHd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAe,GAAf,eAAe,CAAiB;QAChC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;QAzBxB,oBAAe,GAAG,EAAE,CAAC;QACrB,aAAQ,GAAG,EAAE,CAAC;QACd,aAAQ,GAAG,EAAE,CAAC;QACd,kBAAa,GAAG,KAAK,CAAC;QACtB,iBAAY,GAAG,KAAK,CAAC;QAErB,sBAAiB,GAAG,KAAK,CAAC;QAC1B,iBAAY,GAAG,IAAI,CAAC;QAEpB,kBAAkB;QAClB,oBAAe,GAAG,KAAK,CAAC;QACxB,oBAAe,GAAG,KAAK,CAAC;IAerB,CAAC;IAEJ,0CAAc,GAAd;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAClD,CAAC;IAEO,6CAAiB,GAAzB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,2GAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,CACL,IAAI,CAAC,QAAQ,KAAK,EAAE;gBACpB,IAAI,CAAC,QAAQ,KAAK,EAAE;gBACpB,IAAI,CAAC,eAAe,KAAK,EAAE,CAC5B,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,EAAE,IAAI,IAAI,CAAC,QAAQ,KAAK,EAAE,CAAC;QACtD,CAAC;IACH,CAAC;IAEO,+CAAmB,GAA3B;QACE,MAAM,CAAC,CACL,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,EAAE,IAAI,IAAI,CAAC,QAAQ,KAAK,EAAE,CAAC;YAC/C,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAChC,CAAC;IACJ,CAAC;IAED,wCAAY,GAAZ;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YAC3B,KAAK,2GAAuB,CAAC,MAAM;gBACjC,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,KAAK,CAAC;YACR,KAAK,2GAAuB,CAAC,KAAK;gBAChC,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,KAAK,CAAC;YACR,KAAK,2GAAuB,CAAC,GAAG;gBAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,KAAK,CAAC;QACV,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,0CAAc,GAAd;QAAA,iBAgBC;QAfC,IAAM,KAAK,GAAwB;YACjC,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,WAAW,EAAE,IAAI,CAAC,QAAQ;SAC3B,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,SAAS,CACjD,kBAAQ;YACN,IAAM,OAAO,GAAG,4BAA4B,CAAC;YAC7C,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC,EACD,gBAAM;YACJ,IAAM,OAAO,GAAG,8BAA8B,CAAC;YAC/C,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACpC,CAAC,CACF,CAAC;IACJ,CAAC;IAED,yCAAa,GAAb;QAAA,iBAoBC;QAnBC,iFAAiF;QACjF,IAAM,KAAK,GAAuB;YAChC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM;YACnC,kBAAkB,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK;YAC9C,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,6DAA6D;SACzF,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,kBAAQ;YACN,IAAM,OAAO,GAAG,2BAA2B,CAAC;YAC5C,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,EACD,gBAAM;YACJ,IAAM,OAAO,GAAG,6BAA6B,CAAC;YAC9C,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CACF,CAAC;IACJ,CAAC;IAED,uCAAW,GAAX;QAAA,iBAoBC;QAnBC,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,GAAG,mBAAmB,CAAC;QACpC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,KAAK,GAAuB;gBAChC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM;gBACnC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;gBAC3C,WAAW,EAAE,IAAI,CAAC,QAAQ;aAC3B,CAAC;YACF,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,SAAS,CAChD,gBAAM;gBACJ,IAAM,OAAO,GAAG,iCAAiC,CAAC;gBAClD,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9B,CAAC,EACD,gBAAM;gBACJ,IAAM,OAAO,GAAG,mCAAmC,CAAC;gBACpD,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACpC,CAAC,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IAED,yCAAa,GAAb,UAAc,OAAe;QAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;IAChC,CAAC;IAED,uCAAW,GAAX,UAAY,KAAU,EAAE,OAAe;QACrC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC;IAClC,CAAC;IAED,oCAAQ,GAAR;QAAA,iBA4BC;QA3BC,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,KAAK,2GAAuB,CAAC,MAAM;gBACjC,uDAAuD;gBACvD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,aAAa;oBAChB,2GAAuB,CAAC,2GAAuB,CAAC,MAAM,CAAC,CAAC;gBAC1D,KAAK,CAAC;YACR,KAAK,2GAAuB,CAAC,KAAK;gBAChC,sDAAsD;gBACtD,IAAI,CAAC,aAAa;oBAChB,2GAAuB,CAAC,2GAAuB,CAAC,KAAK,CAAC,CAAC;gBACzD,KAAK,CAAC;YACR,KAAK,2GAAuB,CAAC,GAAG;gBAC9B,oDAAoD;gBACpD,IAAI,CAAC,aAAa;oBAChB,2GAAuB,CAAC,2GAAuB,CAAC,GAAG,CAAC,CAAC;gBACvD,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,SAAS,CAAC,eAAK;oBACvD,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,KAAK,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,KAAK,CAAC;YACR;gBACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAC5D,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CACzC,CAAC;IACJ,CAAC;IA5KQ;QAAR,oEAAK,EAAE;;sDAAiB;IADd,iBAAiB;QAL7B,wEAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;;SAGzB,CAAC;yCA0B0B,yEAAc;YACb,0EAAe;YAChB,uEAAc;YACtB,+DAAM;OA5Bb,iBAAiB,CA8K7B;IAAD,wBAAC;CAAA;AA9K6B;;;;;;;;;;AChB9B;AAAA,IAAM,uBAAuB,GAAG;IAC5B,GAAG,EAAE,KAAK;IACV,KAAK,EAAE,OAAO;IACd,MAAM,EAAE,QAAQ;CACnB,CAAC;AAEF,IAAK,uBAIJ;AAJD,WAAK,uBAAuB;IACxB,mEAAG;IACH,uEAAK;IACL,yEAAM;AACV,CAAC,EAJI,uBAAuB,KAAvB,uBAAuB,QAI3B;AAE2D","file":"auth.module.chunk.js","sourcesContent":["module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/auth-home/auth-home.component.css\n// module id = ./src/app/auth/auth-home/auth-home.component.css\n// module chunks = auth.module","module.exports = \"<!-- <nav>\\n  <a class=\\\"btn btn-ssn\\\" routerLink=\\\"./\\\" routerLinkActive=\\\"active\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\">Home</a>\\n  <a class=\\\"btn btn-ssn\\\" routerLink=\\\"./ResetPassword\\\" routerLinkActive=\\\"active\\\" (click)=\\\"setResetRequested()\\\">Reset password</a>\\n</nav> -->\\n\\n<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/auth-home/auth-home.component.html\n// module id = ./src/app/auth/auth-home/auth-home.component.html\n// module chunks = auth.module","import { Component, OnInit } from '@angular/core';\nimport { PasswordService } from '../password.service';\n@Component({\n  selector: 'app-auth-home',\n  templateUrl: './auth-home.component.html',\n  styleUrls: ['./auth-home.component.css']\n})\nexport class AuthHomeComponent implements OnInit {\n\n  constructor(\n    private passwordService: PasswordService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  setResetRequested() {\n    this.passwordService.setResetRequested(true);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth-home/auth-home.component.ts","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthHomeComponent } from './auth-home/auth-home.component';\nimport { EmailConfirmationComponent } from './email-confirmation/email-confirmation.component';\nimport { AuthHomeGuard } from './guards/auth-home.guard';\nimport { EmailConfirmationGuard } from './guards/email-confirmation.guard';\nimport { LoginGuard } from './guards/login.guard';\nimport { PasswordResetGuard } from './guards/password-reset.guard';\nimport { LoginComponent } from './login/login.component';\nimport { PasswordChangeComponent } from './password-change/password-change.component';\nimport { PasswordForgottenComponent } from './password-forgotten/password-forgotten.component';\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\n\nconst authRoutes: Routes = [\n  {\n    path: '',   /*  /auth   */\n    // redirectTo: 'auth/login',\n    // pathMatch: 'full',\n    // component: LoginComponent,\n    // canActivate: [LoginGuard],\n    component: AuthHomeComponent,\n    children: [\n        {\n          path: '',\n          pathMatch: 'full',\n          redirectTo: 'login'\n        },\n        {\n            path: 'ResetPassword',\n            component: PasswordResetComponent,\n            // canActivate: [PasswordResetGuard]\n          },\n          {\n            path: 'ChangePassword',\n            component: PasswordChangeComponent,\n            data: { title: 'Change password'}\n          },\n          {\n            path: 'ForgotPassword',\n            component: PasswordForgottenComponent\n          },\n          {\n            path: 'ConfirmEmail',\n            component: EmailConfirmationComponent,\n            canActivate: [EmailConfirmationGuard]\n          },\n          {\n              path: 'login',\n              component: LoginComponent,\n              canActivate: [LoginGuard]\n          }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(authRoutes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth-routing.module.ts","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { HeaderModule } from '../main-content/header/header.module';\nimport { SsnBgComponent } from '../shared/components/ssn-bg/ssn-bg.component';\nimport { SsnCardComponent } from '../shared/components/ssn-card/ssn-card.component';\nimport { UriQueryService } from '../shared/services/uri-query.service';\nimport { SharedModule } from '../shared/shared.module';\nimport { AuthHomeComponent } from './auth-home/auth-home.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { EmailConfirmationComponent } from './email-confirmation/email-confirmation.component';\nimport { AuthHomeGuard } from './guards/auth-home.guard';\nimport { EmailConfirmationGuard } from './guards/email-confirmation.guard';\nimport { LoginGuard } from './guards/login.guard';\nimport { PasswordResetGuard } from './guards/password-reset.guard';\nimport { LoginComponent } from './login/login.component';\nimport { PasswordChangeComponent } from './password-change/password-change.component';\nimport { PasswordForgottenComponent } from './password-forgotten/password-forgotten.component';\nimport { PasswordResetComponent } from './password-reset/password-reset.component';\nimport { PasswordService } from './password.service';\nimport { PasswordComponent } from './password/password.component';\n\n@NgModule({\n  imports: [\n    AuthRoutingModule,\n    CommonModule,\n    FormsModule,\n    NgbModule,\n    NgSelectModule,\n    RouterModule,\n    SharedModule,\n    HeaderModule\n  ],\n  exports: [\n    PasswordComponent,\n    SsnBgComponent,\n    SsnCardComponent\n  ],\n  declarations: [\n    AuthHomeComponent,\n    EmailConfirmationComponent,\n    LoginComponent,\n    PasswordComponent,\n    PasswordChangeComponent,\n    PasswordResetComponent,\n    PasswordForgottenComponent,\n  ],\n  providers: [\n    // Guards\n    AuthHomeGuard,\n    EmailConfirmationGuard,\n    LoginGuard,\n    PasswordResetGuard,\n    // Services\n    PasswordService,\n    UriQueryService,\n  ]\n})\nexport class AuthModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/auth.module.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/email-confirmation/email-confirmation.component.css\n// module id = ./src/app/auth/email-confirmation/email-confirmation.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\n<div class=\\\"container pt-5\\\">\\n  <app-ssn-bg header=\\\"ACCOUNT CONFIRMATION\\\" icon=\\\"user.png\\\">\\n\\n    <div *ngIf=isRequesting></div>\\n    <div *ngIf=!isRequesting>\\n      <div *ngIf=\\\"emailConfirmationSuccessful\\\">\\n\\n        <app-ssn-card>\\n            <h3>Thank you for confirming your email address.</h3>\\n            <p>Now please select a password for the account created by your local administrator:</p>\\n        </app-ssn-card>\\n  \\n        <app-password purpose=\\\"Set\\\"></app-password>\\n  \\n        <!-- <div class=\\\"row\\\">\\n          <div class=\\\"col\\\">\\n            <h3>You will be redirected to login page in... </h3>\\n          </div>\\n          <div class=\\\"col\\\">\\n            <h1>{{secondsRemaining}} seconds</h1>\\n          </div>\\n        </div> -->\\n      </div>\\n  \\n      <app-ssn-card *ngIf=\\\"!emailConfirmationSuccessful\\\" header=\\\"Account confirmation\\\">\\n        <p>Email confirmation unsuccessful.</p>\\n        <p>This may occur if the link you've been provided has expired. Please contact your local system administrator.</p>\\n        <div *ngIf=\\\"errors\\\" class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n          <span>{{errors}}</span>\\n        </div>\\n      </app-ssn-card>\\n    </div>\\n    \\n    </app-ssn-bg>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/email-confirmation/email-confirmation.component.html\n// module id = ./src/app/auth/email-confirmation/email-confirmation.component.html\n// module chunks = auth.module","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router  } from '@angular/router';\nimport { TokenQueryModel } from '../../shared/models/';\nimport { AccountService, UriQueryService } from '../../shared/services/';\n\n@Component({\n  selector: 'app-email-confirmation',\n  templateUrl: './email-confirmation.component.html',\n  styleUrls: ['./email-confirmation.component.css']\n})\nexport class EmailConfirmationComponent implements OnInit {\n\n  secondsRemaining = 10;\n\n  errors: string;\n  emailConfirmationSuccessful = false;\n  isRequesting = true;\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private accountService: AccountService,\n    private uriQueryService: UriQueryService\n  ) { }\n\n  ngOnInit() {\n    // const tokenQueryModel = this.uriQueryService.getTokenQueryModel(this.activatedRoute.snapshot.queryParams);\n    // this.confirmEmail(tokenQueryModel);\n    // console.log('emailConfirmed?', this.emailConfirmationSuccessful);\n\n    this.initAsync();\n\n    // this.accountService.confirmEmail(tokenQueryModel)\n    //   .subscribe(result => {\n    //     // If email confirmation token was valid\n    //     if (result) {\n    //       // Update html to reflect email successfully confirmed\n    //       console.log('email confirmation was successful');\n    //       // Get password reset token\n    //       this.accountService.getPasswordResetToken(tokenQueryModel.userId)\n    //         .subscribe(passwordResetToken => {\n    //           if (passwordResetToken) {\n    //             console.log({passwordResetToken: passwordResetToken});\n    //             // Redirect? Or present link to navigate?\n    //             // Redirect:\n    //             // Navigate to reset password and supply token as query parameter in URI\n    //             // this.router.navigate(['ResetPassword'], { queryParams: userId, token});\n    //             // Present link? ...\n    //           }\n    //         });\n    //     }\n    //   }, error => {\n    //     // Update html to reflect email confirmation was unsuccessful\n    //     console.log('email confirmation was unsuccessful');\n    //   }\n    // );\n  }\n\n  async initAsync() {\n    const tokenQueryModel = this.uriQueryService.getTokenQueryModel(this.activatedRoute.snapshot.queryParams);\n    await this.confirmEmail(tokenQueryModel);\n    this.isRequesting = false;\n    console.log('emailConfirmed?', this.emailConfirmationSuccessful);\n  }\n\n  async confirmEmail(tokenQueryModel: TokenQueryModel) {\n    await this.accountService.confirmEmail(tokenQueryModel)\n      .toPromise().then(resultModel => {\n        if (resultModel) {\n          this.emailConfirmationSuccessful = true;\n          this.uriQueryService.setTokenQueryModel(resultModel);\n        }\n      }, error => {\n        this.emailConfirmationSuccessful = false;\n        this.errors = error;\n      }\n    );\n      // .subscribe(result => {\n      //   if (result) {\n      //     this.emailConfirmationSuccessful = true;\n      //   }\n      // }, error => {\n      //   this.errors = error;\n      // });\n  }\n\n  startRedirect(queryModel: TokenQueryModel) {\n    const intervalId = setInterval((activatedRoute: ActivatedRoute) => {\n      if (this.secondsRemaining === 0) {\n        clearInterval(intervalId);\n        this.router.navigate(['../ResetPassword'], {\n          queryParams: {\n            userId: queryModel.userId,\n            token: queryModel.token\n          }\n        });\n      } else {\n        this.secondsRemaining--;\n      }\n    }, 1000);\n\n    /* activatedRoute.queryParamMap\n          .map((params: Params) => params.params)\n          .subscribe((params) => {\n            this.router.navigate(['/ResetPassword'], {\n              queryParams: {\n                userId: params.userId,\n                token: params.token\n              }\n            }\n            );\n            console.log(params);\n          }\n        ); */\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/email-confirmation/email-confirmation.component.ts","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class AuthHomeGuard implements CanActivate {\n\n  constructor(\n    private router: Router\n  ) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n      this.router.navigate(['/auth/login']);\n      return true;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/auth-home.guard.ts","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n\n  constructor(\n    private router: Router\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n      if (this.paramsNull([next.queryParams['userId'], next.queryParams['token']])) {\n        this.router.navigate(['/error']);\n        return false;\n      }\n      return true;\n  }\n\n  // Checks if any of the query parameters are null/undefined or empty string\n  paramsNull(params: any[]): boolean {\n    return params.some(param => {\n      // Checks for null/undefined and empty string\n      return !param || param === '';\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/email-confirmation.guard.ts","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { AuthService, BaseService, ErrorService, LoginService } from 'app/shared/services/';\nimport { Observable } from 'rxjs/Observable';\nimport { BaseGuard } from '../../shared/interfaces/base-guard.interface';\n\n@Injectable()\nexport class LoginGuard extends BaseService implements CanActivate, BaseGuard {\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private loginService: LoginService,\n    private errorService: ErrorService\n  ) {\n    super();\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    if (!this.authService.hasToken()) {\n      return true;\n    } else {\n      return this.authService.hasValidToken()\n        .toPromise()\n        .then(() => {\n          this.router.navigateByUrl('');\n          return false;\n        })\n        .catch((error: HttpErrorResponse) => {\n          console.log(error);\n          const _canActivate: boolean = this.navigateByError(error);\n          return _canActivate;\n        });\n    }\n  }\n\n  navigateByError(error: HttpErrorResponse | any): boolean {\n    // Redirects user to correct page according to the error\n    if (error instanceof HttpErrorResponse) {\n      const httpError = error as HttpErrorResponse;\n      if (httpError.status >= 500) {\n        this.errorService.setDefaultHTTPError(error);\n        this.router.navigate(['/error']);\n      } else if (httpError.status === 401 || httpError.status === 403) {\n        //  Unauthorized - token invalid\n        /*  User tries to access login route with an invalid token\n        *   This is OK, just remove relevant variables from localStorage\n        *   so user can receive a new token upon login. */\n        this.loginService.logout();\n        return true;\n      } else {\n        this.errorService.setDefaultHTTPError(httpError);\n        this.router.navigate(['/error']);\n      }\n    } else {\n      this.errorService.setDefaultError();\n      this.router.navigate(['/error']);\n    }\n\n    return false;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/login.guard.ts","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { PasswordService } from '../password.service';\n\n@Injectable()\nexport class PasswordResetGuard implements CanActivate {\n\n  constructor(\n    private router: Router,\n    private passwordService: PasswordService\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    // Request for reset made within app\n    if (this.passwordService.isResetRequested()) {\n      return true;\n    }\n    // Expect user to have clicked link received by email\n    // Verify query params are present\n    if (this.paramsNull([next.queryParams['userId'], next.queryParams['token']])) {\n      this.router.navigate(['/error']);\n      return false;\n    }\n    return true;\n  }\n\n  // Checks if any of the query parameters are null/undefined or empty string\n  paramsNull(params: any[]): boolean {\n    return params.some(param => {\n      // Checks for null/undefined and empty string\n      return !param || param === '';\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/guards/password-reset.guard.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/login/login.component.css\n// module id = ./src/app/auth/login/login.component.css\n// module chunks = auth.module","module.exports = \"<div class=\\\"container pt-5\\\">\\n  <div class=\\\"jumbotron bg-ssn-light text-ssn\\\">\\n    <div class=\\\"d-table mb-3 mx-auto\\\">\\n      <div class=\\\"d-table-row\\\">\\n        <div class=\\\"d-table-cell\\\">\\n          <img src=\\\"assets/images/flags/ag.png\\\" height=\\\"80px\\\">\\n        </div>\\n        <div class=\\\"d-table-cell px-3\\\">\\n          <h2>IMO Maritime Single Window</h2>\\n          <h6>Development Version. Deployed: 22.11.2018\\n          </h6>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <form #f=\\\"ngForm\\\" novalidate (ngSubmit)=\\\"login(f)\\\">\\n      <div class=\\\"form-group row\\\">\\n        <label for=\\\"email\\\" class=\\\"col-form-label-sm no-wrap col-sm-3 col-md-2 col-lg-2\\\">Email address:</label>\\n        <div class=\\\"col my-auto\\\">\\n          <input id=\\\"email\\\" name=\\\"userName\\\" type=\\\"email\\\" class=\\\"form-control form-control-sm\\\" placeholder=\\\"Enter email address\\\" [(ngModel)]=\\\"credentials.userName\\\"\\n            #email=\\\"ngModel\\\" autocomplete=\\\"username\\\" tmFocus required>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group row\\\">\\n        <label for=\\\"password\\\" class=\\\"col-form-label-sm no-wrap col-sm-3 col-md-2 col-lg-2\\\">Password:</label>\\n        <div class=\\\"col my-auto\\\">\\n          <input id=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" #pw class=\\\"form-control form-control-sm\\\" placeholder=\\\"Enter password\\\"\\n            [(ngModel)]=\\\"credentials.password\\\" autocomplete=\\\"current-password\\\" required>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <button type=\\\"submit\\\" (click)=\\\"pw.select()\\\" class=\\\"btn btn-light\\\" [disabled]=\\\"f.invalid || isRequesting\\\">SIGN IN</button>\\n      </div>\\n\\n      <nav>\\n        <a class=\\\"btn btn-light\\\" routerLink=\\\"../ForgotPassword\\\" routerLinkActive=\\\"active\\\">Forgot password?</a>\\n      </nav>\\n\\n      <div *ngIf=\\\"errors\\\" class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <h5>Error</h5>\\n        <span>{{errors}}</span>\\n      </div>\\n\\n    </form>\\n  </div>\\n</div>\\n<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/login/login.component.html\n// module id = ./src/app/auth/login/login.component.html\n// module chunks = auth.module","// Based on https://github.com/mmacneil/AngularASPNETCore2WebApiAuth/blob/master/src/src/app/account/login-form/login-form.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CONTENT_NAMES } from 'app/shared/constants/content-names';\nimport { Credentials } from 'app/shared/interfaces/credentials.interface';\nimport { AccountService, AuthService, ContentService, LoginService } from 'app/shared/services/';\nimport { MenuClaims } from '../../shared/constants/menu-claims';\nimport { PasswordService } from '../password.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  login_title = 'LOGIN';\n\n  brandNew: boolean;\n  errors: string;\n  isRequesting: boolean;\n  submitted = false;\n  credentials: Credentials = { userName: '', password: '' };\n\n  constructor(\n    private loginService: LoginService,\n    private contentService: ContentService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private accountService: AccountService,\n    private authService: AuthService,\n    private passwordService: PasswordService\n  ) {}\n\n  private logError(error: any) {\n    this.errors = error;\n    this.credentials.password = '';\n  }\n\n  async login({ value, valid }: { value: Credentials; valid: boolean }) {\n    this.submitted = true;\n    this.errors = '';\n    if (valid) {\n      this.isRequesting = true;\n\n      const jwtResponse = await this.loginService\n        .login(value)\n        .toPromise()\n        .then(\n          jwt => {\n            if (jwt) {\n              return jwt;\n            }\n            // Login failed\n          },\n          error => {this.logError(error); console.log(error);}\n        );\n      if (!this.errors) {\n        await this.accountService\n          .getUserClaims()\n          .toPromise()\n          .then(\n            claims => {\n              if (claims) {\n                this.accountService.setUserClaims(claims);\n                if (this.authService.hasPortCallMenuClaim(claims)) {\n                  this.contentService.setContent(CONTENT_NAMES.VIEW_PORT_CALLS);\n                  this.router.navigate(['']);\n                }\n              } else {\n                this.loginService.logout();\n                this.router.navigate(['/error']);\n              }\n              // Error getting user claims\n            },\n            error => this.logError(error)\n          );\n      }\n      this.isRequesting = false;\n    }\n  }\n\n  hasPortCallMenuClaim(claims: any[]): boolean {\n    return claims\n      .filter(claim => claim.type === MenuClaims.TYPE)\n      .some(claim => claim.value === MenuClaims.PORT_CALL);\n  }\n\n  setResetRequested() {\n    this.passwordService.setResetRequested(true);\n  }\n\n  ngOnInit() {\n    // subscribe to router event\n    this.activatedRoute.queryParams.subscribe((param: any) => {\n      this.brandNew = param['brandNew'];\n      // this.credentials.userName = param['userName'];\n    });\n    this.passwordService.setResetRequested(false);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/login/login.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-change/password-change.component.css\n// module id = ./src/app/auth/password-change/password-change.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\n<div class=\\\"container pt-5\\\">\\n    <app-ssn-bg header=\\\"PASSWORD CHANGE\\\" icon=\\\"user.png\\\">\\n        <app-password purpose=\\\"Change\\\">\\n        </app-password>\\n    </app-ssn-bg>\\n    <router-outlet></router-outlet>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-change/password-change.component.html\n// module id = ./src/app/auth/password-change/password-change.component.html\n// module chunks = auth.module","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-password-change',\n  templateUrl: './password-change.component.html',\n  styleUrls: ['./password-change.component.css']\n})\nexport class PasswordChangeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password-change/password-change.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-forgotten/password-forgotten.component.css\n// module id = ./src/app/auth/password-forgotten/password-forgotten.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\n<div class=\\\"container pt-5\\\">\\n  <app-ssn-bg header=\\\"FORGOT PASSWORD\\\">\\n    <app-ssn-card header=\\\"Forgot password\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"text-center col col-sm-2 col-md-4 col-lg-2 col-xl-6\\\">\\n          <p>Please input the email you registered an account with. We will send you an email to that address, providing you\\n            with a link to a page where you can reset your password.\\n          </p>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group row\\\">\\n\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"email\\\">Email</label>\\n        <div class=\\\"col\\\">\\n          <input id=\\\"email\\\" name=\\\"email\\\" class=\\\"form-control form-control-sm\\\" type=\\\"email\\\" placeholder=\\\"Enter email address\\\" [(ngModel)]=\\\"email\\\"\\n            tmFocus validateEmail>\\n        </div>\\n\\n      </div>\\n      <div class=\\\"form-group row\\\">\\n        <div class=\\\"col col-sm-2 col-md-2 col-lg-2 col-xl-2\\\">\\n          <button class=\\\"btn btn-ssn\\\" (click)=\\\"requestPasswordReset();\\\">Send email link</button>\\n        </div>\\n      </div>\\n    </app-ssn-card>\\n\\n    <!-- <app-feedback [props]=\\\"properties\\\"></app-feedback> -->\\n    <app-feedback [started]=\\\"started\\\" [actionSucceeded]=\\\"actionSucceeded\\\" [successMessage]=\\\"successMessage\\\" [errors]=\\\"errors\\\" [errorDescription]=\\\"errorDescription\\\"></app-feedback>\\n\\n  </app-ssn-bg>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-forgotten/password-forgotten.component.html\n// module id = ./src/app/auth/password-forgotten/password-forgotten.component.html\n// module chunks = auth.module","import { Component, Input, OnInit, Output } from '@angular/core';\nimport { FeedBack } from '../../shared/models/feedback';\nimport { AccountService } from '../../shared/services/account.service';\n\n@Component({\n  selector: 'app-password-forgotten',\n  templateUrl: './password-forgotten.component.html',\n  styleUrls: ['./password-forgotten.component.css']\n})\nexport class PasswordForgottenComponent extends FeedBack\n  implements OnInit {\n  email: string;\n\n  constructor(private accountService: AccountService) {\n    super();\n  }\n\n  ngOnInit() {}\n\n  requestPasswordReset() {\n    this.accountService.requestPasswordReset(this.email).subscribe(\n      res => {\n        const msg =\n          'Please check your email for instruction for how to reset your password.';\n        this.reportSuccess(msg);\n      },\n      error => {\n        const msg =\n          'An error occurred while trying to request a password reset';\n        this.reportError(error, msg);\n      }\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password-forgotten/password-forgotten.component.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-reset/password-reset.component.css\n// module id = ./src/app/auth/password-reset/password-reset.component.css\n// module chunks = auth.module","module.exports = \"<app-header-home></app-header-home>\\n<div class=\\\"container pt-5\\\">\\n    <app-ssn-bg header=\\\"PASSWORD RESET\\\" icon=\\\"user.png\\\">\\n        <app-password purpose=\\\"Reset\\\"></app-password>\\n    </app-ssn-bg>\\n    <router-outlet></router-outlet>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password-reset/password-reset.component.html\n// module id = ./src/app/auth/password-reset/password-reset.component.html\n// module chunks = auth.module","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.component.html',\n  styleUrls: ['./password-reset.component.css']\n})\nexport class PasswordResetComponent implements OnInit {\n\n  constructor(\n  ) {}\n\n  ngOnInit() {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password-reset/password-reset.component.ts","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class PasswordService {\n\n  // private resetRequestedSource = new BehaviorSubject<boolean>(false);\n  // resetRequested$ = this.resetRequestedSource.asObservable();\n\n  resetRequested = false;\n\n  constructor() { }\n\n  setResetRequested(value: boolean) {\n    this.resetRequested = value;\n  }\n  isResetRequested(): boolean {\n    return this.resetRequested;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password.service.ts","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password/password.component.css\n// module id = ./src/app/auth/password/password.component.css\n// module chunks = auth.module","module.exports = \"\\n    <app-ssn-card header=\\\"Password {{purpose | lowercase}} form\\\">\\n\\n      <div *ngIf=\\\"isChangeComponent\\\" class=\\\"form-group row\\\">\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"current_password\\\">Current password</label>\\n        <div class=\\\"col\\\">\\n          <input id=\\\"current_password\\\" name=\\\"current_password\\\" class=\\\"form-control form-control-sm\\\" type=\\\"password\\\" placeholder=\\\"Enter your current password\\\"\\n            [(ngModel)]=\\\"currentPassword\\\" (ngModelChange)=\\\"validateFields(); fieldFocused = true;\\\" (blur)=\\\"validateFields(); fieldFocused = false;\\\">\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"first_password\\\">New password</label>\\n        <div class=\\\"col\\\">\\n          <input id=\\\"first_password\\\" name=\\\"first_password\\\" class=\\\"form-control form-control-sm\\\" type=\\\"password\\\" placeholder=\\\"Enter a new password\\\"\\n            [(ngModel)]=\\\"inputOne\\\" (ngModelChange)=\\\"validateFields(); fieldFocused = true;\\\" (blur)=\\\"validateFields(); fieldFocused = false;\\\">\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group row mb-0\\\">\\n        <label class=\\\"col-form-label-sm no-wrap col-sm-2 col-md-2 col-lg-2 col-xl-2\\\" for=\\\"second_password\\\">Retype password</label>\\n        <div class=\\\"col\\\">\\n          <input id=\\\"second_password\\\" name=\\\"second_password\\\" class=\\\"form-control form-control-sm\\\" type=\\\"password\\\" placeholder=\\\"Retype the password\\\"\\n            [(ngModel)]=\\\"inputTwo\\\" (ngModelChange)=\\\"validateFields(); fieldFocused = true;\\\" (blur)=\\\"validateFields(); fieldFocused = false;\\\">\\n        </div>\\n      </div>\\n\\n      <div *ngIf=\\\"fieldsFilled\\\" class=\\\"row\\\">\\n        <div class=\\\"col-sm-2 col-md-2 col-lg-2 col-xl-2\\\">\\n        </div>\\n        <div class=\\\"col\\\" *ngIf=\\\"!passwordMatch && !fieldFocused\\\">\\n          <img height=\\\"16px\\\" src=\\\"assets/images/icons/128x128/red/warning.png\\\">\\n          <small class=\\\"text-danger\\\">New passwords do not match</small>\\n        </div>\\n        <div class=\\\"col\\\" *ngIf=\\\"passwordMatch\\\">\\n          <img height=\\\"16px\\\" src=\\\"assets/images/icons/128x128/green/checkmark.png\\\">\\n          <small class=\\\"text-success\\\">New passwords match</small>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"passwordMatch && !fieldsFilled\\\" class=\\\"row\\\">\\n        <div class=\\\"col\\\" *ngIf=\\\"passwordMatch\\\">\\n          <img height=\\\"16px\\\" src=\\\"assets/images/icons/128x128/green/checkmark.png\\\">\\n          <small class=\\\"text-success\\\">New passwords match, but please also input your current password.</small>\\n        </div>\\n      </div>\\n\\n       <div *ngIf=\\\"!passwordMatch || passwordMatch && !fieldsFilled\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col\\\">\\n            <button class=\\\"btn btn-ssn\\\" disabled>{{purpose}} password</button>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <!-- Passwords typed in and passords match -->\\n      <div *ngIf=\\\"passwordMatch && fieldsFilled\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col\\\">\\n            <button class=\\\"btn btn-ssn\\\" (click)=\\\"editPassword()\\\" [disabled]=\\\"actionSucceeded\\\">{{purpose}} password</button>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <!-- TEST -->\\n      <!-- <div *ngIf=\\\"!passwordMatch || passwordMatch && !fieldsFilled\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col\\\">\\n              <button class=\\\"btn btn-ssn\\\" [disabled]=\\\"!passwordMatch || passwordMatch && !fieldsFilled || !actionSucceeded\\\">{{purpose}} password</button>\\n            </div>\\n          </div>\\n        </div> -->\\n\\n      <div *ngIf=\\\"submissionReady\\\">\\n        <div *ngIf=\\\"actionSucceeded\\\" class=\\\"alert-success\\\" role=\\\"alert\\\">\\n          <h5>Success</h5>\\n          <span>{{successMessage}}</span>\\n        </div>\\n        <div *ngIf=\\\"errors\\\" class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n          <h5>Error</h5>\\n          <span>{{errors}}</span>\\n        </div>\\n      </div>\\n      \\n    </app-ssn-card>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/password/password.component.html\n// module id = ./src/app/auth/password/password.component.html\n// module chunks = auth.module","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Route, Router } from '@angular/router';\nimport {\n  PASSWORD_COMPONENT_NAME,\n  PASSWORD_COMPONENT_TYPE\n} from '../../shared/constants/password-component-types';\nimport { PasswordChangeModel } from '../../shared/models/password-change-model';\nimport { PasswordResetModel } from '../../shared/models/password-reset-model';\nimport { TokenQueryModel } from '../../shared/models/token-query-model';\nimport { AccountService, UriQueryService } from '../../shared/services/';\n\n@Component({\n  selector: 'app-password',\n  templateUrl: './password.component.html',\n  styleUrls: ['./password.component.css']\n})\nexport class PasswordComponent implements OnInit {\n  @Input() purpose: string;\n\n  currentPassword = '';\n  inputOne = '';\n  inputTwo = '';\n  passwordMatch = false;\n  fieldsFilled = false;\n  errors: string;\n  isChangeComponent = false;\n  fieldFocused = true;\n\n  // Error component\n  submissionReady = false;\n  actionSucceeded = false;\n  successMessage: string;\n  errorDescription: string;\n\n  private componentName: string;\n  private componentType: number;\n\n  private tokenQueryModel: TokenQueryModel;\n  private passwordResetToken?: string;\n\n  constructor(\n    private accountService: AccountService,\n    private uriQueryService: UriQueryService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  validateFields() {\n    this.fieldsFilled = this.checkFieldsFilled();\n    this.passwordMatch = this.checkPasswordsMatch();\n  }\n\n  private checkFieldsFilled(): boolean {\n    if (this.componentType === PASSWORD_COMPONENT_TYPE.CHANGE) {\n      return (\n        this.inputOne !== '' &&\n        this.inputTwo !== '' &&\n        this.currentPassword !== ''\n      );\n    } else {\n      return this.inputOne !== '' && this.inputTwo !== '';\n    }\n  }\n\n  private checkPasswordsMatch(): boolean {\n    return (\n      !(this.inputOne === '' || this.inputTwo === '') &&\n      this.inputOne === this.inputTwo\n    );\n  }\n\n  editPassword() {\n    switch (this.componentType) {\n      case PASSWORD_COMPONENT_TYPE.CHANGE:\n        this.changePassword();\n        break;\n      case PASSWORD_COMPONENT_TYPE.RESET:\n        this.resetPassword();\n        break;\n      case PASSWORD_COMPONENT_TYPE.SET:\n        this.setPassword();\n        break;\n    }\n    return false;\n  }\n\n  changePassword() {\n    const model: PasswordChangeModel = {\n      currentPassword: this.currentPassword,\n      newPassword: this.inputOne\n    };\n\n    this.accountService.changePassword(model).subscribe(\n      response => {\n        const message = 'Password change successful';\n        this.reportSuccess(message);\n      },\n      errors => {\n        const message = `Password change unsuccessful`;\n        this.reportError(errors, message);\n      }\n    );\n  }\n\n  resetPassword() {\n    // Validation has been done, so we can safely construct a valid object from model\n    const model: PasswordResetModel = {\n      userId: this.tokenQueryModel.userId,\n      passwordResetToken: this.tokenQueryModel.token,\n      newPassword: this.inputOne // Doesn't matter which input value we pick; they're the same\n    };\n\n    this.accountService.resetPassword(model).subscribe(\n      response => {\n        const message = 'Password reset successful';\n        this.reportSuccess(message);\n        return true;\n      },\n      errors => {\n        const message = `Password reset unsuccessful`;\n        this.reportError(errors, message);\n        return false;\n      }\n    );\n  }\n\n  setPassword() {\n    if (this.passwordResetToken === null) {\n      this.errors = 'Application error';\n    } else {\n      const model: PasswordResetModel = {\n        userId: this.tokenQueryModel.userId,\n        passwordResetToken: this.passwordResetToken,\n        newPassword: this.inputOne\n      };\n      this.accountService.resetPassword(model).subscribe(\n        result => {\n          const message = 'Password assignment successful!';\n          this.reportSuccess(message);\n        },\n        errors => {\n          const message = 'Password assignment unsuccessful!';\n          this.reportError(errors, message);\n        }\n      );\n    }\n  }\n\n  reportSuccess(message: string) {\n    this.submissionReady = true;\n    this.actionSucceeded = true;\n    this.successMessage = message;\n  }\n\n  reportError(error: any, message: string) {\n    this.submissionReady = true;\n    this.actionSucceeded = false;\n    this.errors = error;\n    this.errorDescription = message;\n  }\n\n  ngOnInit() {\n    const purpose = this.purpose.toUpperCase();\n    switch (purpose) {\n      case PASSWORD_COMPONENT_NAME.CHANGE:\n        // this.componentName = PASSWORD_COMPONENT_NAME.CHANGE;\n        this.isChangeComponent = true;\n        this.componentType =\n          PASSWORD_COMPONENT_TYPE[PASSWORD_COMPONENT_NAME.CHANGE];\n        break;\n      case PASSWORD_COMPONENT_NAME.RESET:\n        // this.componentName = PASSWORD_COMPONENT_NAME.RESET;\n        this.componentType =\n          PASSWORD_COMPONENT_TYPE[PASSWORD_COMPONENT_NAME.RESET];\n        break;\n      case PASSWORD_COMPONENT_NAME.SET:\n        // this.componentName = PASSWORD_COMPONENT_NAME.SET;\n        this.componentType =\n          PASSWORD_COMPONENT_TYPE[PASSWORD_COMPONENT_NAME.SET];\n        this.uriQueryService.tokenQueryModelData$.subscribe(token => {\n          this.passwordResetToken = token.token;\n        });\n        break;\n      default:\n        this.router.navigate(['/error']);\n    }\n    this.tokenQueryModel = this.uriQueryService.getTokenQueryModel(\n      this.activatedRoute.snapshot.queryParams\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/password/password.component.ts","const PASSWORD_COMPONENT_NAME = {\n    SET: 'SET',\n    RESET: 'RESET',\n    CHANGE: 'CHANGE'\n};\n\nenum PASSWORD_COMPONENT_TYPE {\n    SET,\n    RESET,\n    CHANGE\n}\n\nexport { PASSWORD_COMPONENT_NAME, PASSWORD_COMPONENT_TYPE };\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/constants/password-component-types.ts"],"sourceRoot":"webpack:///"}